#!/usr/bin/env python3
import os
import asyncio
import threading
from flask import Flask, Response

from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode

# ================== –ö–æ–Ω—Ñ–∏–≥ ==================
BOT_TOKEN = os.getenv("BOT_TOKEN")
CREATOR_ID = 1951437901

admins = set([CREATOR_ID])
texts = {
    "start": """üëã –ü—Ä–∏–≤–µ—Ç! –Ø MensemBot.
‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è - /info
üìú –ü—Ä–∞–≤–∏–ª–∞ - /rules
üìä –¶–µ–Ω—ã –Ω–∞ —Ä–∞–Ω–≥–∏ - /rank
‚úÖ –û—Å—Ç–∞–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã - /help

üõ°Discord —Å–µ—Ä–≤–µ—Ä: https://mensem.fun/discord
üéÄ –û–±—â–∏–π —á–∞—Ç: https://t.me/mensem_barone
üìïBarone Family: https://t.me/baronefam
üìòMensem Club: https://t.me/+sl5f-AkJBmFiZjgy
    """,
    "info": """‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
üëã–ü—Ä–∏–≤–µ—Ç, –¥–∞–Ω–Ω—ã–π –±–æ—Ç —Å–æ–∑–¥–∞–Ω —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è üìôBarone Family –∏ üìòMensem Club
‚úÖ –°–æ–∑–¥–∞—Ç–µ–ª—å –±–æ—Ç–∞ –∏ —Å–µ–º–µ–π - @vladlotto - –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ –Ω–µ–º—É –ø–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º!

üõ°Discord —Å–µ—Ä–≤–µ—Ä: https://mensem.fun/discord
üéÄ –û–±—â–∏–π —á–∞—Ç: https://t.me/mensem_barone
üìïBarone Family: https://t.me/baronefam
üìòMensem Club: https://t.me/+sl5f-AkJBmFiZjgy

üíÇ‚Äç‚ôÇÔ∏è–õ–∏–¥–µ—Ä—ã: @Sergei_Chapaev / @DoneBarone
ü•∑–ó–∞–º–µ—Å—Ç–∏—Ç–µ–ª–∏:  @Santa_Chapaev / @Cobalt228 / @vladlotto / @Paradise_Lin / @Studenticks
    """,
    "rank": """üìä –¶–µ–Ω—ã –Ω–∞ —Ä–∞–Ω–≥–∏ 
    üíµBarone Family:
2  - 2–∫–∫ –ª–∏–±–æ –≤—Å—Ç—É–ø–∏—Ç—å –≤ –≥—Ä—É–ø–ø—É
3 - 3–∫–∫
4 - 4–∫–∫
5 - 5–∫–∫ –∏–ª–∏ —Ñ—É–ª–ª –≤–∏–ø–∫–∞ ( –∞–¥–¥ –∏ –ø—Ä–µ–º–∫–∞ ), –ª–∏–±–æ –ø—Ä–æ–º–æ–∫–æ–¥
6 - 6–∫–∫
7 - 7–∫–∫
8 - 8–∫–∫ –ª–∏–±–æ —Å–º–µ–Ω–∞ –Ω–∏–∫–∞ –Ω–∞ Barone –∏–ª–∏ Mensem
üí∂Mensem Club:
3 - 3–∫–∫
4 - 4–∫–∫
5 - 5–∫–∫ –∏–ª–∏  –ø—Ä–æ–º–æ–∫–æ–¥
6 - 6–∫–∫
7 - –ï—Å–ª–µ –µ—Å—Ç—å –∞–¥–¥ –∏–ª–∏ –ø—Ä–µ–º–∏—É–º –≤–∏–ø
8 - –î–æ–ª–≥–æ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ñ–∞–º–µ –∏–ª–∏ —Å–º–µ–Ω–∏—Ç—å –Ω–∏–∫ –Ω–∞ Mensem
""",
    "rules": """üìú –ü—Ä–∞–≤–∏–ª–∞
–ü–µ—Ä–≤–æ–µ –∏ —Å–∞–º–æ–µ –≥–ª–∞–≤–Ω–æ–µ –ø—Ä–∞–≤–∏–ª–æ!
–ï—Å–ª–∏ —Ö–æ—Ç—å 1 –ø–∏–¥–∞—Ä–∞—Å –∏–∑ –≤–∞—Å –Ω–∞–ø–∏—à–µ—Ç –∫–∞–∫—É—é-—Ç–æ —Ö—É–µ—Ç—É, —Å—Ä–∞–∑—É –≤ –ß–°–§
p.s. –î–∞–ª—å—à–µ —Å–∞–º–∏ –¥—É–º–∞–π—Ç–µ –∫–∏–∫–∏–µ –ø—Ä–∞–≤–∏–ª–∞ –¥–µ–ª–∞—Ç—å!
""",
    "help": """‚ùì –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã: 
üß© /help - –ö–æ–º–∞–Ω–¥—ã
‚úÖ /start - –ó–∞–ø—É—Å–∫ –ë–æ—Ç–∞
‚ÑπÔ∏è /info - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
üìú /rules - –ü—Ä–∞–≤–∏–ª–∞
üìä /rank - –¶–µ–Ω—ã –Ω–∞ —Ä–∞–Ω–≥–∏
üíµ /shop - –ö—É–ø–∏—Ç—å —Ä–∞–Ω–≥
üÜî /id - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–π ID
üéÄ /idea - –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–¥–µ—é/–∂–∞–ª–æ–±—É —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤—É
""",
    "shop": """–ß—Ç–æ–±—ã –ø–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ —Ä–∞–Ω–≥
–í–∞–º –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ(—Å–∫—Ä–∏–Ω—à–æ—Ç) —Ç–æ–≥–æ –∫–∞–∫ –≤—ã –ø–æ–ø–æ–ª–Ω–∏–ª–∏ —Å–µ–º–µ–π–Ω—ã–π —Å—á—ë—Ç –Ω–∞ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—É—é —Å—É–º–º—É –∏–∑ /rank
–ò –≤ –ø–æ–¥–ø–∏—Å—å –∫ —Ñ–æ—Ç–æ –¥–æ–±–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç

–ü—Ä–∏–º–µ—Ä:
–ù–∏–∫: Vlad_Mensem
–°–µ–º—å—è: Mensem
–†–∞–Ω–≥: 5
–î–æ–∫-–≤–∞: –°–∫—Ä–∏–Ω—à–æ—Ç –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è —Å—á—ë—Ç–∞
""",
}
idea_chat_id = "-1002473077041"

# ================== Flask ==================
# ================== Flask ==================
health_app = Flask(__name__)
CORS(health_app)  # ‚úÖ –†–∞–∑—Ä–µ—à–∞–µ–º –∑–∞–ø—Ä–æ—Å—ã —Å –¥—Ä—É–≥–∏—Ö –¥–æ–º–µ–Ω–æ–≤

@health_app.route("/", methods=["GET"])
def index():
    return """
    <!DOCTYPE html>
    <html lang="ru">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>Bot ‚Ä¢ –°—Ç–∞—Ç—É—Å</title>
        <style>
            body {
                margin: 0;
                padding: 0;
                height: 100vh;
                background: radial-gradient(circle at top, #200, #000);
                color: #fff;
                font-family: 'Segoe UI', sans-serif;
                display: flex;
                flex-direction: column;
                align-items: center;
                justify-content: center;
                text-align: center;
            }
            .glow {
                font-size: 3em;
                font-weight: 700;
                color: #ff1b1b;
                text-shadow: 0 0 15px #ff1b1b, 0 0 40px #ff1b1b55;
                animation: pulse 2.5s infinite alternate;
            }
            @keyframes pulse {
                0% { text-shadow: 0 0 15px #ff1b1b, 0 0 30px #ff1b1b55; }
                100% { text-shadow: 0 0 35px #ff1b1b, 0 0 70px #ff1b1b99; }
            }
            .status-box {
                margin-top: 25px;
                padding: 15px 25px;
                border: 2px solid #ff1b1b66;
                border-radius: 10px;
                background: rgba(0, 0, 0, 0.35);
                box-shadow: 0 0 20px rgba(255, 0, 0, 0.3);
            }
            .status { font-size: 1.2em; color: #ccc; margin-top: 10px; }
            .pulse-dot {
                display: inline-block;
                width: 12px;
                height: 12px;
                background: #ff1b1b;
                border-radius: 50%;
                box-shadow: 0 0 10px #ff1b1b;
                animation: blink 1.5s infinite;
            }
            @keyframes blink {
                0%, 100% { opacity: 1; transform: scale(1); }
                50% { opacity: 0.3; transform: scale(0.7); }
            }
            footer { position: absolute; bottom: 15px; font-size: 0.9em; color: #777; }
            a { color: #ff4747; text-decoration: none; transition: 0.3s; }
            a:hover { color: #fff; text-shadow: 0 0 8px #ff1b1b; }
        </style>
    </head>
    <body>
        <h1 class="glow">üî• –†–æ–±–æ—Ç –ê–∫—Ç–∏–≤–µ–Ω</h1>
        <div class="status-box">
            <p class="status">–°–æ—Å—Ç–æ—è–Ω–∏–µ: <span class="pulse-dot"></span> –†–∞–±–æ—Ç–∞–µ—Ç 24/7</p>
            <p>–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ.</p>
        </div>
        <footer>¬© 2025 <a href="https://mensem.fun" target="_blank">Mensem.Fun</a> ‚Äî by Vladyslav</footer>
    </body>
    </html>
    """

# üîç –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è (–¥–ª—è —Å–∞–π—Ç–∞ Mensem.Fun)
@health_app.route("/status", methods=["GET"])
def status():
    return jsonify({"status": "ok", "bot": "MensemBot"}), 200

def run_flask():
    port = int(os.environ.get("PORT", 8080))
    health_app.run(host="0.0.0.0", port=port)

# ================== –ë–æ—Ç ==================
bot = Bot(
    token=BOT_TOKEN,
    default=DefaultBotProperties(parse_mode=ParseMode.HTML)
)
dp = Dispatcher()

# ================== Helpers ==================
def isCreator(user_id: int) -> bool:
    return user_id == CREATOR_ID

def isAdmin(user_id: int) -> bool:
    return user_id in admins

def get_user_display(user: types.User) -> str:
    return f"{user.full_name} (@{user.username})" if user.username else user.full_name

# ================== –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã ==================
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    await message.answer(texts["start"])

@dp.message(Command("info"))
async def cmd_info(message: types.Message):
    await message.answer(texts["info"])

@dp.message(Command("rank"))
async def cmd_rank(message: types.Message):
    await message.answer(texts["rank"])

@dp.message(Command("rules"))
async def cmd_rules(message: types.Message):
    await message.answer(texts["rules"])

@dp.message(Command("help"))
async def cmd_help(message: types.Message):
    await message.answer(texts["help"])

@dp.message(Command("id"))
async def cmd_id(message: types.Message):
    await message.answer(f"–í–∞—à ID: <code>{message.from_user.id}</code>")

# ================== –ê–¥–º–∏–Ω—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã ==================
async def set_text_cmd(message: types.Message, key: str):
    if not isAdmin(message.from_user.id):
        return await message.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.")
    parts = message.text.split(" ", 1)
    if len(parts) < 2:
        return await message.answer("‚ö†Ô∏è –£–∫–∞–∂–∏ —Ç–µ–∫—Å—Ç.")
    texts[key] = parts[1]
    await message.answer(f"‚úÖ {key} –æ–±–Ω–æ–≤–ª—ë–Ω.")

@dp.message(Command("setstart"))
async def cmd_setstart(message: types.Message):
    await set_text_cmd(message, "start")

@dp.message(Command("setinfo"))
async def cmd_setinfo(message: types.Message):
    await set_text_cmd(message, "info")

@dp.message(Command("setrank"))
async def cmd_setrank(message: types.Message):
    await set_text_cmd(message, "rank")

@dp.message(Command("setrules"))
async def cmd_setrules(message: types.Message):
    await set_text_cmd(message, "rules")

@dp.message(Command("sethelp"))
async def cmd_sethelp(message: types.Message):
    await set_text_cmd(message, "help")

@dp.message(Command("setshop"))
async def cmd_setshop(message: types.Message):
    await set_text_cmd(message, "shop")

@dp.message(Command("setideachat"))
async def cmd_setideachat(message: types.Message):
    global idea_chat_id
    if not isAdmin(message.from_user.id):
        return await message.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.")
    parts = message.text.split(" ", 1)
    if len(parts) < 2 or not parts[1].isdigit():
        return await message.answer("‚ö†Ô∏è –£–∫–∞–∂–∏ ID —á–∞—Ç–∞.")
    idea_chat_id = int(parts[1])
    await message.answer(f"‚úÖ –ß–∞—Ç –∏–¥–µ–π –æ–±–Ω–æ–≤–ª—ë–Ω: {idea_chat_id}")

@dp.message(Command("addadmin"))
async def cmd_addadmin(message: types.Message):
    if not isCreator(message.from_user.id):
        return await message.answer("‚ùå –¢–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –¥–æ–±–∞–≤–ª—è—Ç—å –∞–¥–º–∏–Ω–æ–≤.")
    if not message.reply_to_message:
        return await message.answer("‚ö†Ô∏è –û—Ç–≤–µ—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —á—Ç–æ–±—ã –≤—ã–¥–∞—Ç—å –∞–¥–º–∏–Ω–∫—É.")
    uid = message.reply_to_message.from_user.id
    admins.add(uid)
    await message.answer(f"‚úÖ {get_user_display(message.reply_to_message.from_user)} —Ç–µ–ø–µ—Ä—å –∞–¥–º–∏–Ω.")

@dp.message(Command("unadmin"))
async def cmd_unadmin(message: types.Message):
    if not isCreator(message.from_user.id):
        return await message.answer("‚ùå –¢–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç —Å–Ω–∏–º–∞—Ç—å –∞–¥–º–∏–Ω–∫—É.")
    if not message.reply_to_message:
        return await message.answer("‚ö†Ô∏è –û—Ç–≤–µ—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —á—Ç–æ–±—ã —Å–Ω—è—Ç—å –∞–¥–º–∏–Ω–∫—É.")
    uid = message.reply_to_message.from_user.id
    if uid in admins:
        admins.remove(uid)
        await message.answer(f"‚ùå {get_user_display(message.reply_to_message.from_user)} –±–æ–ª—å—à–µ –Ω–µ –∞–¥–º–∏–Ω.")

@dp.message(Command("staff"))
async def cmd_staff(message: types.Message):
    staff_list = [f"üëë –°–æ–∑–¥–∞—Ç–µ–ª—å: {get_user_display(message.from_user) if message.from_user.id==CREATOR_ID else CREATOR_ID}"]
    for uid in admins:
        if uid != CREATOR_ID:
            try:
                user = await bot.get_chat(uid)
                staff_list.append(f"üîë –ê–¥–º–∏–Ω: {get_user_display(user)}")
            except:
                staff_list.append(f"üîë –ê–¥–º–∏–Ω: ID {uid}")
    await message.answer("\n".join(staff_list))

@dp.message(Command("botstats"))
async def cmd_botstats(message: types.Message):
    if not isCreator(message.from_user.id):
        return
    await message.answer(f"üìä Bot stats:\nAdmins: {len(admins)}\nIdeaChat: {idea_chat_id}")

#============ –ú—É—Ç –∫–æ–º–∞–Ω–¥—Å
from datetime import timedelta

def parse_duration(duration_str: str) -> timedelta:
    """–ü–∞—Ä—Å–∏—Ç —Å—Ç—Ä–æ–∫—É —Ñ–æ—Ä–º–∞—Ç–∞ '10m', '2h', '1d'"""
    try:
        num = int(''.join(filter(str.isdigit, duration_str)))
        if "h" in duration_str:
            return timedelta(hours=num)
        elif "d" in duration_str:
            return timedelta(days=num)
        else:
            return timedelta(minutes=num)
    except:
        return timedelta(minutes=10)  # –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 10 –º–∏–Ω—É—Ç

@dp.message(Command("mute"))
async def cmd_mute(message: types.Message):
    if not message.chat.type.endswith("group"):
        return await message.answer("‚ö†Ô∏è –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö.")
    if not isAdmin(message.from_user.id):
        return await message.answer("‚ùå –£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
    if not message.reply_to_message:
        return await message.answer("‚ö†Ô∏è –û—Ç–≤–µ—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —á—Ç–æ–±—ã –∑–∞–º—É—Ç–∏—Ç—å –µ–≥–æ.")

    args = message.text.split()
    duration = parse_duration(args[1]) if len(args) > 1 else timedelta(minutes=10)
    until_date = message.date + duration
    user_id = message.reply_to_message.from_user.id

    try:
        await bot.restrict_chat_member(
            chat_id=message.chat.id,
            user_id=user_id,
            permissions=types.ChatPermissions(can_send_messages=False),
            until_date=until_date
        )

        time_str = (
            f"{duration.days} –¥–Ω." if duration.days > 0 else
            f"{duration.seconds // 3600} —á." if duration.seconds >= 3600 else
            f"{duration.seconds // 60} –º–∏–Ω."
        )
        await message.answer(
            f"üîá –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.reply_to_message.from_user.mention_html()} –∑–∞–º—É—á–µ–Ω –Ω–∞ {time_str}.",
            parse_mode="HTML"
        )
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –∑–∞–º—É—Ç–∏—Ç—å: {e}")

@dp.message(Command("unmute"))
async def cmd_unmute(message: types.Message):
    if not message.chat.type.endswith("group"):
        return await message.answer("‚ö†Ô∏è –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö.")
    if not isAdmin(message.from_user.id):
        return await message.answer("‚ùå –£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
    if not message.reply_to_message:
        return await message.answer("‚ö†Ô∏è –û—Ç–≤–µ—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —á—Ç–æ–±—ã —Ä–∞–∑–º—É—Ç–∏—Ç—å –µ–≥–æ.")

    user_id = message.reply_to_message.from_user.id
    try:
        await bot.restrict_chat_member(
            chat_id=message.chat.id,
            user_id=user_id,
            permissions=types.ChatPermissions(can_send_messages=True)
        )
        await message.answer(
            f"üîä –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.reply_to_message.from_user.mention_html()} —Ä–∞–∑–º—É—á–µ–Ω.",
            parse_mode="HTML"
        )
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–º—É—Ç–µ: {e}")

# ================== /shop —Å —Ñ–æ—Ç–æ ==================
@dp.message(Command("shop"))
async def cmd_shop(message: types.Message):
    if message.chat.type != "private":
        return await message.answer("‚ö†Ô∏è –ú–∞–≥–∞–∑–∏–Ω –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–∫–µ —Å –±–æ—Ç–æ–º.")
    await message.answer(texts["shop"])

@dp.message(F.photo)
async def handle_shop_order(message: types.Message):
    if message.chat.type != "private":
        return
    if not message.caption:
        return await message.answer("‚ùå –î–æ–±–∞–≤—å –ø–æ–¥–ø–∏—Å—å –∫ —Ñ–æ—Ç–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: –ù–∏–∫: Vlad_Mensem, –°–µ–º—å—è: Mensem , –†–∞–Ω–≥: 5, –î–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞: –°–∫—Ä–∏–Ω).")
    if not idea_chat_id:
        return await message.answer("‚ùå –ß–∞—Ç –∏–¥–µ–π –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω.")

    kb = InlineKeyboardBuilder()
    kb.button(text="‚úÖ –í—ã–¥–∞–Ω–æ", callback_data=f"approve:{message.from_user.id}")
    kb.button(text="‚ùå –û—Ç–∫–∞–∑–∞–Ω–æ", callback_data=f"deny:{message.from_user.id}")

    await bot.send_photo(
        idea_chat_id,
        photo=message.photo[-1].file_id,
        caption=f"üõí –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –∏–∑ /shop:\n\n{message.caption}\n\n–û—Ç: {get_user_display(message.from_user)}",
        reply_markup=kb.as_markup()
    )
    await message.answer("‚úÖ –ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤—É, –æ–∂–∏–¥–∞–π –æ—Ç–≤–µ—Ç–∞.")

# ================== Callbacks ==================
@dp.callback_query(F.data.startswith("approve"))
async def cb_approve(callback: types.CallbackQuery):
    user_id = int(callback.data.split(":")[1])
    await bot.send_message(user_id, "‚úÖ –¢–≤–æ—è –∑–∞—è–≤–∫–∞ –≤ /shop –æ–¥–æ–±—Ä–µ–Ω–∞!")
    await callback.answer("–í—ã–¥–∞–Ω–æ!")

@dp.callback_query(F.data.startswith("deny"))
async def cb_deny(callback: types.CallbackQuery):
    user_id = int(callback.data.split(":")[1])
    await bot.send_message(user_id, "‚ùå –¢–≤–æ—è –∑–∞—è–≤–∫–∞ –≤ /shop –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.")
    await callback.answer("–û—Ç–∫–∞–∑–∞–Ω–æ!")

# ================== MAIN ==================
async def main():
    flask_thread = threading.Thread(target=run_flask, daemon=True)
    flask_thread.start()
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
