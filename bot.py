import logging
from aiogram import Bot, Dispatcher, F, types
from aiogram.filters import Command
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
import asyncio

# ======= –ù–ê–°–¢–†–û–ô–ö–ò =======
TOKEN = "8170191285:AAFu9e0VGeeJYjYbTTaenuMeiT6zZTyVliQ"  # –≤—Å—Ç–∞–≤—å —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
CREATOR_ID = 1951437901    # —Ç–≤–æ–π Telegram ID

# ======= –ù–ê–°–¢–†–û–ô–ö–ê –õ–û–ì–û–í =======
logging.basicConfig(level=logging.INFO)

# ======= –°–û–ó–î–ê–ù–ò–ï –ë–û–¢–ê =======
bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()

# ======= –î–ê–ù–ù–´–ï =======
data = {
    "start": "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç üòä",
    "info": "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ.",
    "rules": "–ü—Ä–∞–≤–∏–ª–∞ –µ—â—ë –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã.",
    "rank": "–£ —Ç–µ–±—è –æ–±—ã—á–Ω—ã–π —Ä–∞–Ω–≥.",
    "admins": set(),   # —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤
}

# ======= –§–£–ù–ö–¶–ò–ò –ü–†–û–í–ï–†–û–ö =======
def isCreator(user_id: int) -> bool:
    return user_id == CREATOR_ID

def isAdmin(user_id: int) -> bool:
    return user_id == CREATOR_ID or user_id in data["admins"]

# ======= –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–û–ú–ê–ù–î =======

@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    await message.answer(data["start"])

@dp.message(Command("info"))
async def cmd_info(message: types.Message):
    await message.answer(data["info"])

@dp.message(Command("rules"))
async def cmd_rules(message: types.Message):
    await message.answer(data["rules"])

@dp.message(Command("rank"))
async def cmd_rank(message: types.Message):
    await message.answer(data["rank"])

@dp.message(Command("id"))
async def cmd_id(message: types.Message):
    await message.answer(f"–¢–≤–æ–π ID: <code>{message.from_user.id}</code>")

@dp.message(Command("setstart"))
async def cmd_setstart(message: types.Message):
    if not isAdmin(message.from_user.id):
        return await message.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
    text = message.text.split(" ", 1)
    if len(text) > 1:
        data["start"] = text[1]
        await message.answer("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ /start –∏–∑–º–µ–Ω–µ–Ω–æ.")
    else:
        await message.answer("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /setstart <—Ç–µ–∫—Å—Ç>")

@dp.message(Command("setinfo"))
async def cmd_setinfo(message: types.Message):
    if not isAdmin(message.from_user.id):
        return await message.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
    text = message.text.split(" ", 1)
    if len(text) > 1:
        data["info"] = text[1]
        await message.answer("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ /info –∏–∑–º–µ–Ω–µ–Ω–æ.")
    else:
        await message.answer("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /setinfo <—Ç–µ–∫—Å—Ç>")

@dp.message(Command("setrules"))
async def cmd_setrules(message: types.Message):
    if not isAdmin(message.from_user.id):
        return await message.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
    text = message.text.split(" ", 1)
    if len(text) > 1:
        data["rules"] = text[1]
        await message.answer("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ /rules –∏–∑–º–µ–Ω–µ–Ω–æ.")
    else:
        await message.answer("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /setrules <—Ç–µ–∫—Å—Ç>")

@dp.message(Command("setrank"))
async def cmd_setrank(message: types.Message):
    if not isAdmin(message.from_user.id):
        return await message.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
    text = message.text.split(" ", 1)
    if len(text) > 1:
        data["rank"] = text[1]
        await message.answer("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ /rank –∏–∑–º–µ–Ω–µ–Ω–æ.")
    else:
        await message.answer("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /setrank <—Ç–µ–∫—Å—Ç>")

@dp.message(Command("shop"))
async def cmd_shop(message: types.Message):
    await message.answer("üõí –ú–∞–≥–∞–∑–∏–Ω —Å–∫–æ—Ä–æ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω!")

@dp.message(Command("idea"))
async def cmd_idea(message: types.Message):
    text = message.text.split(" ", 1)
    if len(text) > 1:
        await message.answer(f"üí° –ò–¥–µ—è –ø—Ä–∏–Ω—è—Ç–∞: {text[1]}")
    else:
        await message.answer("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /idea <–≤–∞—à–∞ –∏–¥–µ—è>")

@dp.message(Command("staff"))
async def cmd_staff(message: types.Message):
    admins_list = [str(uid) for uid in data["admins"]]
    await message.answer(
        f"üëë –°–æ–∑–¥–∞—Ç–µ–ª—å: <code>{CREATOR_ID}</code>\n"
        f"üõ° –ê–¥–º–∏–Ω—ã: {', '.join(admins_list) if admins_list else '–Ω–µ—Ç'}"
    )

@dp.message(Command("addadmin"))
async def cmd_addadmin(message: types.Message):
    if not isCreator(message.from_user.id):
        return await message.answer("‚ùå –¢–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –¥–æ–±–∞–≤–ª—è—Ç—å –∞–¥–º–∏–Ω–æ–≤.")
    text = message.text.split(" ", 1)
    if len(text) > 1 and text[1].isdigit():
        uid = int(text[1])
        data["admins"].add(uid)
        await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {uid} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∞–¥–º–∏–Ω—ã.")
    else:
        await message.answer("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /addadmin <user_id>")

@dp.message(Command("unadmin"))
async def cmd_unadmin(message: types.Message):
    if not isCreator(message.from_user.id):
        return await message.answer("‚ùå –¢–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç —É–¥–∞–ª—è—Ç—å –∞–¥–º–∏–Ω–æ–≤.")
    text = message.text.split(" ", 1)
    if len(text) > 1 and text[1].isdigit():
        uid = int(text[1])
        if uid in data["admins"]:
            data["admins"].remove(uid)
            await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {uid} —É–¥–∞–ª—ë–Ω –∏–∑ –∞–¥–º–∏–Ω–æ–≤.")
        else:
            await message.answer("‚ùå –≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–¥–º–∏–Ω.")
    else:
        await message.answer("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /unadmin <user_id>")

@dp.message(Command("botstats"))
async def cmd_botstats(message: types.Message):
    await message.answer("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞: –ø–æ–∫–∞ –ø—É—Å—Ç–æ üôÇ")

@dp.message(Command("help"))
async def cmd_help(message: types.Message):
    await message.answer(
        "<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
        "/start ‚Äì —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
        "/info ‚Äì –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è\n"
        "/rules ‚Äì –ø—Ä–∞–≤–∏–ª–∞\n"
        "/rank ‚Äì —Ç–≤–æ–π —Ä–∞–Ω–≥\n"
        "/shop ‚Äì –º–∞–≥–∞–∑–∏–Ω\n"
        "/id ‚Äì –ø–æ–∫–∞–∑–∞—Ç—å —Ç–≤–æ–π ID\n"
        "/idea <—Ç–µ–∫—Å—Ç> ‚Äì –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –∏–¥–µ—é\n"
        "/staff ‚Äì —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤\n"
        "/botstats ‚Äì —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞\n\n"
        "<b>–ö–æ–º–∞–Ω–¥—ã –¥–ª—è –∞–¥–º–∏–Ω–æ–≤:</b>\n"
        "/setstart <—Ç–µ–∫—Å—Ç>\n/setinfo <—Ç–µ–∫—Å—Ç>\n/setrules <—Ç–µ–∫—Å—Ç>\n/setrank <—Ç–µ–∫—Å—Ç>\n\n"
        "<b>–ö–æ–º–∞–Ω–¥—ã –¥–ª—è —Å–æ–∑–¥–∞—Ç–µ–ª—è:</b>\n"
        "/addadmin <id>\n/unadmin <id>"
    )

# ======= –ó–ê–ü–£–°–ö =======
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
