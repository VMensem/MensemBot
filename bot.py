import logging
from aiogram import Bot, Dispatcher, F, types
from aiogram.filters import Command
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from aiogram.utils.keyboard import InlineKeyboardBuilder
import asyncio

# ======= –ù–ê–°–¢–†–û–ô–ö–ò =======
TOKEN = "8170191285:AAFu9e0VGeeJYjYbTTaenuMeiT6zZTyVliQ"
CREATOR_ID = 1951437901   # —Ç–≤–æ–π Telegram ID

# ======= –ù–ê–°–¢–†–û–ô–ö–ê –õ–û–ì–û–í =======
logging.basicConfig(level=logging.INFO)

# ======= –°–û–ó–î–ê–ù–ò–ï –ë–û–¢–ê =======
bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()

# ======= –î–ê–ù–ù–´–ï =======
data = {
    "start": "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç üòä",
    "info": "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ.",
    "rules": "–ü—Ä–∞–≤–∏–ª–∞ –µ—â—ë –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã.",
    "rank": "–£ —Ç–µ–±—è –æ–±—ã—á–Ω—ã–π —Ä–∞–Ω–≥.",
    "help": "–ó–¥–µ—Å—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥.",
    "shop": "–ú–∞–≥–∞–∑–∏–Ω –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.",
    "admins": set(),   # —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤
    "idea_chat": None, # —á–∞—Ç –¥–ª—è –∏–¥–µ–π –∏ –∑–∞—è–≤–æ–∫
}

# ======= –§–£–ù–ö–¶–ò–ò –ü–†–û–í–ï–†–û–ö =======
def isCreator(user_id: int) -> bool:
    return user_id == CREATOR_ID

def isAdmin(user_id: int) -> bool:
    return user_id == CREATOR_ID or user_id in data["admins"]

# ======= –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–û–ú–ê–ù–î =======
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    await message.answer(data["start"])

@dp.message(Command("info"))
async def cmd_info(message: types.Message):
    await message.answer(data["info"])

@dp.message(Command("rules"))
async def cmd_rules(message: types.Message):
    await message.answer(data["rules"])

@dp.message(Command("rank"))
async def cmd_rank(message: types.Message):
    await message.answer(data["rank"])

@dp.message(Command("id"))
async def cmd_id(message: types.Message):
    await message.answer(f"–¢–≤–æ–π ID: <code>{message.from_user.id}</code>")

# --- –£–°–¢–ê–ù–û–í–ö–ê –¢–ï–ö–°–¢–û–í ---
async def set_text(message: types.Message, key: str):
    if not isAdmin(message.from_user.id):
        return await message.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
    text = message.text.split(" ", 1)
    if len(text) > 1:
        data[key] = text[1]
        await message.answer(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ /{key} –∏–∑–º–µ–Ω–µ–Ω–æ.")
    else:
        await message.answer(f"‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /set{key} <—Ç–µ–∫—Å—Ç>", parse_mode=None)

@dp.message(Command("setstart"))
async def cmd_setstart(message: types.Message): await set_text(message, "start")

@dp.message(Command("setinfo"))
async def cmd_setinfo(message: types.Message): await set_text(message, "info")

@dp.message(Command("setrules"))
async def cmd_setrules(message: types.Message): await set_text(message, "rules")

@dp.message(Command("setrank"))
async def cmd_setrank(message: types.Message): await set_text(message, "rank")

@dp.message(Command("sethelp"))
async def cmd_sethelp(message: types.Message): await set_text(message, "help")

@dp.message(Command("setshop"))
async def cmd_setshop(message: types.Message): await set_text(message, "shop")

# --- –£–°–¢–ê–ù–û–í–ö–ê –ß–ê–¢–ê –î–õ–Ø –ò–î–ï–ô ---
@dp.message(Command("setideachat"))
async def cmd_setideachat(message: types.Message):
    if not isCreator(message.from_user.id):
        return await message.answer("‚ùå –¢–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –º–µ–Ω—è—Ç—å —á–∞—Ç –∏–¥–µ–π.")
    args = message.text.split()
    if len(args) == 2 and args[1].lstrip("-").isdigit():
        data["idea_chat"] = int(args[1])
        await message.answer(f"‚úÖ –ß–∞—Ç –∏–¥–µ–π —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {args[1]}")
    else:
        await message.answer("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /setideachat <chat_id>")

# --- SHOP ---
@dp.message(Command("shop"))
async def cmd_shop(message: types.Message):
    if message.chat.type != "private":
        return await message.answer("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å /shop –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–∫–µ —Å –±–æ—Ç–æ–º.")
    await message.answer(
        f"{data['shop']}\n\n"
        "üìå –û—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é –≤–∏–¥–∞:\n"
        "–ù–∏–∫: Vlad_Mensem\n–†–∞–Ω–≥: 5\n–î–æ–∫-–≤–∞: –°–∫—Ä–∏–Ω—à–æ—Ç –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ–∞–º —Å—á—ë—Ç–∞"
    )

@dp.message(F.photo)
async def handle_shop_request(message: types.Message):
    if message.chat.type != "private":
        return
    if not message.caption:
        return await message.answer("‚ùå –ù—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é!")

    if data["idea_chat"] is None:
        return await message.answer("‚ùå –ß–∞—Ç –∏–¥–µ–π –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω!")

    # –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
    kb = InlineKeyboardBuilder()
    kb.button(text="‚úÖ –í—ã–¥–∞–Ω–æ", callback_data=f"approve:{message.from_user.id}")
    kb.button(text="‚ùå –û—Ç–∫–∞–∑–∞–Ω–æ", callback_data=f"deny:{message.from_user.id}")
    kb.adjust(2)

    # –ø–µ—Ä–µ—Å—ã–ª–∞–µ–º –∑–∞—è–≤–∫—É –≤ —á–∞—Ç –∏–¥–µ–π
    await bot.send_photo(
        chat_id=data["idea_chat"],
        photo=message.photo[-1].file_id,
        caption=f"üõí –ó–∞—è–≤–∫–∞ –∏–∑ /shop:\n\n{message.caption}\n\nüë§ –û—Ç: {message.from_user.mention_html()}",
        reply_markup=kb.as_markup()
    )
    await message.answer("‚úÖ –ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏.")

# --- –û–ë–†–ê–ë–û–¢–ö–ê –ö–ù–û–ü–û–ö ---
@dp.callback_query(F.data.startswith("approve"))
async def cb_approve(call: types.CallbackQuery):
    uid = int(call.data.split(":")[1])
    await bot.send_message(uid, "‚úÖ –¢–≤–æ—è –∑–∞—è–≤–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞!")
    await call.answer("–û–¥–æ–±—Ä–µ–Ω–æ ‚úî")

@dp.callback_query(F.data.startswith("deny"))
async def cb_deny(call: types.CallbackQuery):
    uid = int(call.data.split(":")[1])
    await bot.send_message(uid, "‚ùå –¢–≤–æ—è –∑–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.")
    await call.answer("–û—Ç–∫–ª–æ–Ω–µ–Ω–æ ‚úñ")

# --- STAFF ---
@dp.message(Command("staff"))
async def cmd_staff(message: types.Message):
    staff_list = []
    for uid in data["admins"]:
        try:
            user = await bot.get_chat(uid)
            staff_list.append(user.first_name if not user.username else f"@{user.username}")
        except:
            staff_list.append(str(uid))
    staff_str = ", ".join(staff_list) if staff_list else "–Ω–µ—Ç"
    await message.answer(
        f"üëë –°–æ–∑–¥–∞—Ç–µ–ª—å: <code>{CREATOR_ID}</code>\n"
        f"üõ° –ê–¥–º–∏–Ω—ã: {staff_str}"
    )

# --- –î–û–ë–ê–í–õ–ï–ù–ò–ï/–£–î–ê–õ–ï–ù–ò–ï –ê–î–ú–ò–ù–ê –ß–ï–†–ï–ó –†–ï–ü–õ–ê–ô ---
@dp.message(Command("addadmin"))
async def cmd_addadmin(message: types.Message):
    if not isCreator(message.from_user.id):
        return await message.answer("‚ùå –¢–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –¥–æ–±–∞–≤–ª—è—Ç—å –∞–¥–º–∏–Ω–æ–≤.")
    if message.reply_to_message:
        uid = message.reply_to_message.from_user.id
        data["admins"].add(uid)
        return await message.answer(f"‚úÖ {message.reply_to_message.from_user.mention_html()} —Ç–µ–ø–µ—Ä—å –∞–¥–º–∏–Ω.")
    await message.answer("‚ùå –û—Ç–≤–µ—Ç—å –∫–æ–º–∞–Ω–¥–æ–π /addadmin –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")

@dp.message(Command("unadmin"))
async def cmd_unadmin(message: types.Message):
    if not isCreator(message.from_user.id):
        return await message.answer("‚ùå –¢–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç —É–¥–∞–ª—è—Ç—å –∞–¥–º–∏–Ω–æ–≤.")
    if message.reply_to_message:
        uid = message.reply_to_message.from_user.id
        if uid in data["admins"]:
            data["admins"].remove(uid)
            return await message.answer(f"‚úÖ {message.reply_to_message.from_user.mention_html()} –±–æ–ª—å—à–µ –Ω–µ –∞–¥–º–∏–Ω.")
        else:
            return await message.answer("‚ùå –≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–¥–º–∏–Ω.")
    await message.answer("‚ùå –û—Ç–≤–µ—Ç—å –∫–æ–º–∞–Ω–¥–æ–π /unadmin –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")

# --- –ò–î–ï–ò ---
@dp.message(Command("idea"))
async def cmd_idea(message: types.Message):
    text = message.text.split(" ", 1)
    if len(text) > 1:
        if data["idea_chat"] is None:
            return await message.answer("‚ùå –ß–∞—Ç –∏–¥–µ–π –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω!")
        await bot.send_message(data["idea_chat"], f"üí° –ò–¥–µ—è: {text[1]}\nüë§ –û—Ç {message.from_user.mention_html()}")
        await message.answer("‚úÖ –ò–¥–µ—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
    else:
        await message.answer("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /idea <–≤–∞—à–∞ –∏–¥–µ—è>", parse_mode=None)

# --- BOTSTATS ---
@dp.message(Command("botstats"))
async def cmd_botstats(message: types.Message):
    if not isCreator(message.from_user.id):
        return await message.answer("‚ùå –î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—é.")
    await message.answer("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:\n–ü–æ–∫–∞ –ø—É—Å—Ç–æ üôÇ")

# --- HELP ---
@dp.message(Command("help"))
async def cmd_help(message: types.Message):
    await message.answer(data["help"], parse_mode=None)

# ======= –ó–ê–ü–£–°–ö =======
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
